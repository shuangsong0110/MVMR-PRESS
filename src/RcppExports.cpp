// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matrixVectorMult
NumericVector matrixVectorMult(NumericMatrix mat, NumericVector vec);
RcppExport SEXP _MVMRPRESS_matrixVectorMult(SEXP matSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixVectorMult(mat, vec));
    return rcpp_result_gen;
END_RCPP
}
// g
double g(NumericVector theta, NumericMatrix A, NumericVector b);
RcppExport SEXP _MVMRPRESS_g(SEXP thetaSEXP, SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(g(theta, A, b));
    return rcpp_result_gen;
END_RCPP
}
// Gr
NumericVector Gr(NumericVector theta, NumericMatrix A, NumericVector b, double tt, double lambda);
RcppExport SEXP _MVMRPRESS_Gr(SEXP thetaSEXP, SEXP ASEXP, SEXP bSEXP, SEXP ttSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Gr(theta, A, b, tt, lambda));
    return rcpp_result_gen;
END_RCPP
}
// PGD
NumericVector PGD(NumericMatrix A, NumericVector b, NumericVector theta, double lambda, int iter);
RcppExport SEXP _MVMRPRESS_PGD(SEXP ASEXP, SEXP bSEXP, SEXP thetaSEXP, SEXP lambdaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(PGD(A, b, theta, lambda, iter));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _MVMRPRESS_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MVMRPRESS_matrixVectorMult", (DL_FUNC) &_MVMRPRESS_matrixVectorMult, 2},
    {"_MVMRPRESS_g", (DL_FUNC) &_MVMRPRESS_g, 3},
    {"_MVMRPRESS_Gr", (DL_FUNC) &_MVMRPRESS_Gr, 5},
    {"_MVMRPRESS_PGD", (DL_FUNC) &_MVMRPRESS_PGD, 5},
    {"_MVMRPRESS_rcpp_hello_world", (DL_FUNC) &_MVMRPRESS_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_MVMRPRESS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
